&ACCESS RVO1
&REL 48
def aip_meta_eki()
   ; Author: Moritz Weisenboehler (HsKA) <moritz.weisenboehler@hs-karlsruhe.de>
   
   ;Declarations
   decl int index
   
   ; Initialization
   ;bas(#initmov, 0)
   init_interface()
   current_meta = null_meta()

   index = 0
   
   ; Move to current position
   ;ptp $axis_act_meas
   
   ; Communication process
   loop
      if get_meta(current_meta) then
         update_meta(current_meta)
      endif
   endloop
end

deffct meta_type null_meta()
   decl meta_type meta
   
   meta = { velocity_override 1, abort_commands 0}
   
   return meta
endfct

def init_interface()
   decl eki_status status
   
   global interrupt decl 15 when $flag[2] == false do reset_interface()
   interrupt on 15
   
   global interrupt decl 16 when $timer_flag[2] == true do send_status()
   interrupt on 16
   
   wait sec 0.012          ; Wait for next interpolation cycle
   $timer[2] = -200        ; Time in [ms] before first interrupt call
   $timer_stop[2] = false  ; Start timer 2
   
   status = eki_init("AIP_META_EKI")
   status = eki_open("AIP_META_EKI")
end


def reset_interface()
   decl eki_status status

   status = eki_clear("AIP_META_EKI")
   status = eki_init("AIP_META_EKI")
   status = eki_open("AIP_META_EKI")
end


deffct bool has_connection()
   return $flag[2]
endfct


def send_status()
   decl eki_status status
   
   if has_connection() then
      ; Command id
      status = eki_setreal("AIP_META_EKI", "MetaState/@VelocityOverride", current_meta.velocity_override)
      status = eki_setint("AIP_META_EKI", "MetaState/@CommandEmpty", 0)
      
      if has_connection() then
         status = eki_send("AIP_META_EKI", "MetaState")
      endif
   endif
   
   ; Set timer for next interrupt [ms]
   $timer[2] = -10  ; ~10 ms for above send + 10 ms interrupt timer -> ~50 Hz state transmission
end


def check_error(error_code :in)
   decl int error_code
   
   decl char error_message[64]
   decl int index
   
   index = 0
   
   for index = 1 to 64
      error_message[index] = " "
   endfor
   
   if error_code > 0 then
      switch error_code
         case 1
            error_message[] = "Fehler 1"
         default
            error_message[] = "Unbekannter Fehler"
      endswitch
      
      send_error(error_code, error_message[])
     endif
end

def send_error(error_code :in, error_message[] :in)
   decl int error_code
   decl char error_message[]
   
   decl eki_status status
   
   if has_connection() then
      status = eki_setint("AIP_META_EKI", "MetaState/Error/@Code", error_code)
      status = eki_setstring("AIP_META_EKI", "MetaState/Error/@Message", error_message[])
   endif
end


deffct bool has_meta()
   decl eki_status status
   
   if not has_connection() then
      return false
   endif

   status = eki_checkbuffer("AIP_META_EKI", "MetaCommand/@VelocityOverride")
   
   return status.buff > 0
endfct


deffct bool get_meta(meta :out)
   decl meta_type meta
   
   decl eki_status status
   
   if not has_meta() then
     return false
   endif
   
   status = eki_getreal("AIP_META_EKI", "MetaCommand/@VelocityOverride", meta.velocity_override)
   status = eki_getint("AIP_META_EKI", "MetaCommand/@AbortCommands", meta.abort_commands)
   
   return true
endfct


def update_meta(meta :in)
   decl meta_type meta

   ; Update velocity_override
   ; Update abort_commands_flag
end
